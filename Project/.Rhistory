plot.margin = margin(t = 0, r = 0, b = 40, l = 5, unit = "pt"),
plot.title = element_text(face = "bold", color = "black", size = 11, hjust=0.5))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
plot_ly(jme2014, x = ~region, y=~num_wasting,
type = "bar", coord_flip(),
text = ~paste('Wasting, number of children:',num_wasting, 'Year:', year))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
plot_ly(jme2014, x = ~region, y=~num_wasting,
type = "bar",
text = ~paste('Wasting, number of children:',num_wasting, 'Year:', year))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
plot_ly(jme2014, x = ~num_wasting, y=~region,
type = "bar",
text = ~paste('Wasting, number of children:',num_wasting, 'Year:', year))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
plot_ly(jme2014, x = ~num_wasting, y=~region,
type = "bar",
text = ~paste('Wasting, number of children:',num_wasting))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
plot_ly(jme2014, x = ~num_wasting, y=~region, color = ~region,
type = "bar",
text = ~paste('Wasting, number of children:',num_wasting))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
plot_ly(jme2014, x = ~num_wasting, y=~region,
type = "bar",
text = ~paste('Wasting, number of children:',num_wasting))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
p<- plot_ly(jme2014, x = ~num_wasting, y=~region, type = "bar",
text = ~paste('Wasting, number of children:',num_wasting), name='Wasting'  %>%
add_trace(x = ~num_stunting, name = 'Stunting') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group'))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
p<- plot_ly(jme2014, x = ~num_wasting, y=~region, type = "bar",
text = ~paste('Wasting, number of children:',num_wasting), name='Wasting')  %>%
add_trace(x = ~num_stunting, name = 'Stunting') %>%
layout(xaxis = list(title = 'Count'), barmode = 'group')
p
# A Prefix nulling hook.
# Make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get("output")
# Output hooks handle normal R console output.
knitr::knit_hooks$set( output = function(x, options) {
comment <- knitr::opts_current$get("comment")
if( is.na(comment) ) comment <- ""
can_null <- grepl( paste0( comment, "\\s*\\[\\d?\\]" ),
x, perl = TRUE)
do_null <- isTRUE( knitr::opts_current$get("null_prefix") )
if( can_null && do_null ) {
# By default R print output aligns at the right brace.
align_index <- regexpr( "\\]", x )[1] - 1
# Two cases: start or newline
re <- paste0( "^.{", align_index, "}\\]")
rep <- comment
x <- gsub( re, rep,  x )
re <- paste0( "\\\n.{", align_index, "}\\]")
rep <- paste0( "\n", comment )
x <- gsub( re, rep,  x )
}
default_output_hook( x, options )
})
knitr::opts_template$set("kill_prefix"=list(comment=NA, null_prefix=TRUE))
## Normal Setup From Here
library(knitr)
knitr::opts_knit$set(root.dir = whereamI)
whereamI <- "C:/Users/crish/OneDrive/Documents/Columbia SIPA/2017 Spring/Data Visualization/Class 11/"
# Load packages.
packages <- c("devtools","knitr","leaflet","shiny","raster","rgdal","RColorBrewer")
packages <- lapply(packages, FUN = function(x) {
if(!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
# A Prefix nulling hook.
# Make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get("output")
# Output hooks handle normal R console output.
knitr::knit_hooks$set( output = function(x, options) {
comment <- knitr::opts_current$get("comment")
if( is.na(comment) ) comment <- ""
can_null <- grepl( paste0( comment, "\\s*\\[\\d?\\]" ),
x, perl = TRUE)
do_null <- isTRUE( knitr::opts_current$get("null_prefix") )
if( can_null && do_null ) {
# By default R print output aligns at the right brace.
align_index <- regexpr( "\\]", x )[1] - 1
# Two cases: start or newline
re <- paste0( "^.{", align_index, "}\\]")
rep <- comment
x <- gsub( re, rep,  x )
re <- paste0( "\\\n.{", align_index, "}\\]")
rep <- paste0( "\n", comment )
x <- gsub( re, rep,  x )
}
default_output_hook( x, options )
})
knitr::opts_template$set("kill_prefix"=list(comment=NA, null_prefix=TRUE))
## Normal Setup From Here
library(knitr)
knitr::opts_knit$set(root.dir = whereamI)
opts_chunk$set(root.dir = whereamI,
fig.path="images/",
cache.path="cache/",
#   dev=c("png","pdf"),
#  fig.width=5,
#  fig.height=4.5,
#  dpi=300,
#  fig.show="hold",
#  fig.lp="fig:",
cache=TRUE,
#  par=TRUE,
echo=TRUE,
message=FALSE,
warning=FALSE)
knitr::include_graphics("images/shiny_showcase.png")
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
shiny::runApp('C:/Users/crish/OneDrive/Documents/Columbia SIPA/2017 Spring/Data Visualization/Shiny app/Crisha')
runApp('C:/Users/crish/OneDrive/Documents/Columbia SIPA/2017 Spring/Data Visualization/Shiny app/Crisha')
runApp('C:/Users/crish/OneDrive/Documents/Columbia SIPA/2017 Spring/Data Visualization/Shiny app/Crisha')
#install.packages('network')
library(network)
library(ggplot2)
library(ggthemes)
library(scales)
ggplot(jme_latest, aes(x=stunting, y=wasting, color=region)) + geom_point(alpha=0.5, size=3) +
ggtitle("Prevalence of stunting and wasting") +
labs(x="Stunting (%)", y = "Wasting (%)", size=8) +
theme_classic(base_size = 12) + theme(text = element_text(color = "gray20"),
axis.text.x = element_text(NULL),
legend.position = c("bottom"),
axis.text = element_text(face = "italic"),
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = 2),
axis.ticks.y = element_blank(),
axis.line = element_line(color = "gray40", size = 0.5),
axis.line.y = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank(),
plot.margin = margin(t = 0, r = 0, b = 40, l = 5, unit = "pt"),
plot.title = element_text(face = "bold", color = "black", size = 11, hjust=0.5))
library(plotly)
plot_ly(jme_latest, x = ~stunting, y=~wasting,
color = ~region, type = "scatter",
text = ~paste(country, 'Year:', year))
plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year)%>%
layout(yaxis = list(title = "Sin"), zaxis = list(title = "Z")))
plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year)%>%
layout(yaxis = "Sin", zaxis = "Z"))
plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year),
layout(yaxis = "Sin", zaxis = "Z"))
x <- list(title = "x Axis", titlefont = f)
f <- list(family = "Arial, monospace",
size = 18, color = "#7f7f7f")
x <- list(title = "x Axis", titlefont = f)
y <- list(title = "y Axis", titlefont = f)
plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year),
layout(yaxis = y, zaxis = z))
f <- list(family = "Arial, monospace",
size = 18, color = "#7f7f7f")
x <- list(title = "x Axis", titlefont = f)
y <- list(title = "y Axis", titlefont = f)
p<- plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year) %>%
layout(yaxis = y, zaxis = z))
p
f <- list(family = "Arial, monospace",
size = 18, color = "#7f7f7f")
x <- list(title = "x Axis", titlefont = f)
y <- list(title = "y Axis", titlefont = f)
p<- plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year) %>%
layout(yaxis = y))
p
f <- list(family = "Arial, monospace",
size = 18, color = "#7f7f7f")
x <- list(title = "x Axis", titlefont = f)
y <- list(title = "y Axis", titlefont = f)
p<- plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year) %>%
layout(yaxis = list(title = 'Count'), barmode = 'group'))
p
#f <- list(family = "Arial, monospace",
#  size = 18, color = "#7f7f7f")
#x <- list(title = "x Axis", titlefont = f)
#y <- list(title = "y Axis", titlefont = f)
p<- plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year) %>%
layout(yaxis = list(title = 'Count'), barmode = 'group'))
p
#f <- list(family = "Arial, monospace",
#  size = 18, color = "#7f7f7f")
#x <- list(title = "x Axis", titlefont = f)
#y <- list(title = "y Axis", titlefont = f)
p<- plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year)) %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
#f <- list(family = "Arial, monospace",
#  size = 18, color = "#7f7f7f")
#x <- list(title = "x Axis", titlefont = f)
#y <- list(title = "y Axis", titlefont = f)
p<- plot_ly(trend_stunting_global, x = ~year, y=~stunting_global,
type = "bar",
text = ~paste('Stunting (%):',stunting_global, 'Year:', year)) %>%
layout(yaxis = list(title = 'Global prevalence of stunting, 1995-2015'), barmode = 'group')
p
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
jme_short <- jmeyears[myvars]
#install.packages("DT")
library(DT)
datatable(as.data.frame(round(jme_short,20)),
colnames = c('Country', 'Region', 'Year', 'Wasting (%)',
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
jme_short <- jmeyears[myvars]
#install.packages("DT")
library(DT)
datatable(jme_short,
colnames = c('Country', 'Region', 'Year', round('Wasting (%)',1),
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
jme_short <- jmeyears[myvars]
#install.packages("DT")
library(DT)
datatable(jme_short,
colnames = c('Country', 'Region', 'Year', 'Wasting (%)',
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
jme_short <- jmeyears[myvars]
round(wasting, digits = 0)
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
jme_short <- jmeyears[myvars]
round(jme_short$wasting, digits = 0)
#install.packages("DT")
library(DT)
datatable(jme_short,
colnames = c('Country', 'Region', 'Year', 'Wasting (%)',
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
jme_short <- jmeyears[myvars]
round(jme_short$wasting, digits = 2)
#install.packages("DT")
library(DT)
datatable(jme_short,
colnames = c('Country', 'Region', 'Year', 'Wasting (%)',
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
myvars <- c("country", "region", "year", "round(jme_short$wasting, digits = 2)", "stunting", "pop5")
jme_short <- jmeyears[myvars]
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
round(myvars$wasting, digits = 2)
myvars <- c("country", "region", "year", "wasting", "stunting", "pop5")
jme_short <- jmeyears[myvars]
round(jme_short$wasting, digits = 2)
#install.packages("DT")
library(DT)
datatable(jme_short,
colnames = c('Country', 'Region', 'Year', 'Wasting (%)',
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
jme$wasting1 <- round(jme_short$wasting, digits = 2)
jme$wasting1 <- round(jme$wasting, digits = 2)
myvars <- c("country", "region", "year", "wasting1", "stunting", "pop5")
jme_short <- jmeyears[myvars]
jmeyears$wasting1 <- round(jme$wasting, digits = 2)
jmeyears$wasting1 <- round(jmeyears$wasting, digits = 2)
myvars <- c("country", "region", "year", "wasting1", "stunting", "pop5")
jme_short <- jmeyears[myvars]
#install.packages("DT")
library(DT)
datatable(jme_short,
colnames = c('Country', 'Region', 'Year', 'Wasting (%)',
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
jmeyears$wasting1 <- round(jmeyears$wasting, digits = 2)
jmeyears$stunting1 <- round(jmeyears$stunting, digits = 2)
jmeyears$pop51 <- round(jmeyears$pop5, digits = 0)
myvars <- c("country", "region", "year", "wasting1", "stunting1", "pop51")
jme_short <- jmeyears[myvars]
#install.packages("DT")
library(DT)
datatable(jme_short,
colnames = c('Country', 'Region', 'Year', 'Wasting (%)',
'Stunting (%)', 'Children < 5 years old (000)'),
filter = 'top', options = list(pageLength = 10, autoWidth = TRUE))
library(plotly)
plot_ly(jme_latest, x = ~stunting, y=~wasting,
color = ~region, type = "scatter",
text = ~paste(country, 'Year:', year))
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
p<- plot_ly(jme2014, x = ~num_wasting, y=~region, type = "bar",
text = ~paste('Wasting, number of children:',num_wasting), name='Wasting')  %>%
add_trace(x = ~num_stunting, name = 'Stunting') %>%
layout(xaxis = list(title = 'Count'), barmode = 'group')
p
plot_ly(iycf, x = ~Region, y=~Counselling_mothers, color = "#de8a78", type = "bar") %>%
layout(yaxis = list(title = 'Number of mothers reached with IYCF counselling'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~Region, y=~childrenMNP, color = ~Region, type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(ggplot2)
library(ggthemes)
library(scales)
jme0614 <- jme[which(jme$year=='2006' | jme$year=='2014'),]
ggplot(jme0614, aes(x=year, y=stunting)) +
geom_boxplot() +
geom_jitter(size = 4, alpha = 0.5, aes(col = region, size=year), na.rm = TRUE)  + facet_grid(. ~ region) +
ggtitle("Graph 4. Percentage of stunting per region, 2006-2014") +
labs(x="", y = "Stunting (%)", size=8) +
ggthemes::theme_few(base_size = 12) + theme(text = element_text(color = "gray20"),
axis.text.x = element_text(NULL),
legend.position = c("none"),
axis.text = element_text(face = "italic"),
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = 2),
axis.ticks.y = element_blank(),
axis.line = element_line(color = "gray40", size = 0.5),
axis.line.y = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank(),
plot.margin = margin(t = 0, r = 0, b = 40, l = 5, unit = "pt"),
plot.title = element_text(face = "bold", color = "black", size = 11, hjust=0.5))
stunting_global <- c(39.6 , 35.7 , 32.7 , 29.4 , 24.4 , 23.2)
year <- c("1990", "1995", "2000", "2005", "2010", "2015")
trend_stunting_global <- data.frame(stunting_global,year)
names(trend_stunting_global) <- c("stunting_global","year")
library(ggplot2)
library(ggthemes)
library(scales)
ggplot(data=trend_stunting_global, aes(x=year, y=stunting_global)) +
geom_bar(stat = "identity", fill="#009FDF") +
scale_fill_brewer(palette="YlGnBu") +
ggtitle("Graph 1. Trends in stunting prevalence, 1990-2015") +
labs(x="", y = "Children given MNP", size=8) +
theme_classic(base_size = 12) + theme(text = element_text(color = "gray20"),
axis.text.x = element_text(NULL),
legend.position = c("bottom"), legend.direction = "horizontal",
legend.justification = 0.05, legend.text = element_text(size = 9, color = "gray10"),
legend.key.height=unit(1,"line"), legend.key.width=unit(1,"line"),
axis.text = element_text(face = "italic"),
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = 2),
axis.ticks.y = element_blank(),
axis.line = element_line(color = "gray40", size = 0.5),
axis.line.y = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank(),
plot.margin = margin(t = 0, r = 0, b = 40, l = 5, unit = "pt"),
plot.title = element_text(face = "bold", color = "black", size = 11, hjust=0.5))
jmeyears <- jme[which(jme$year=='2000' | jme$year=='2006' | jme$year=='2010' | jme$year=='2014'),]
ggplot(data=jmeyears, aes(x=year, y=num_wasting, fill=year)) + geom_bar(stat = "identity") +
scale_fill_brewer(palette="YlGnBu") +
ggtitle("Graph 1. Number of children wasted, 2014") +
labs(x="", y = "Number of children wasted", size=8) +
theme_classic(base_size = 12) + theme(text = element_text(color = "gray20"),
axis.text.x = element_text(NULL),
legend.position = c("none"),
axis.text = element_text(face = "italic"),
axis.title.x = element_text(vjust = -1),
axis.title.y = element_text(vjust = 2),
axis.ticks.y = element_blank(),
axis.line = element_line(color = "gray40", size = 0.5),
axis.line.y = element_blank(),
panel.grid.major = element_line(color = "gray50", size = 0.5),
panel.grid.major.x = element_blank(),
plot.margin = margin(t = 0, r = 0, b = 40, l = 5, unit = "pt"),
plot.title = element_text(face = "bold", color = "black", size = 11, hjust=0.5))
#CEECIS	EAPRO	ESARO	LACRO	MENA	ROSA	WCARO
perc_wast <- c(3.0,	5.5,	6.2,	1.7,	8.7,	14.2,	8.6)
perc_stunt <- c(11.9,	18.7,	35.7,	12.8,	21.3,	39.1,	33.8)
perc_malnutrition <- data.frame(region, perc_wast, perc_stunt)
names(perc_malnutrition) <- c("Region", "perc_wasting","perc_stunt")
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
p<- plot_ly(jme2014, x = ~num_wasting, y=~region, type = "bar",
text = ~paste('Wasting, number of children:',num_wasting), name='Wasting')  %>%
add_trace(x = ~num_stunting, name = 'Stunting') %>%
layout(xaxis = list(title = 'Number of children'), barmode = 'group')
p
library(plotly)
plot_ly(perc_malnutrition, x = ~perc_wasting, y=~region, type = "bar",
text = ~paste('Wasting, prevalence:',perc_wasting), name='Prevalence Wasting')  %>%
add_trace(x = ~perc_stunting, name = 'Prevalence Stunting') %>%
layout(xaxis = list(title = 'Percentage of children'), barmode = 'group')
library(plotly)
plot_ly(perc_malnutrition, x = ~perc_wast, y=~region, type = "bar",
text = ~paste('Wasting, prevalence:',perc_wasting), name='Prevalence Wasting')  %>%
add_trace(x = ~perc_stunt, name = 'Prevalence Stunting') %>%
layout(xaxis = list(title = 'Percentage of children'), barmode = 'group')
library(plotly)
plot_ly(perc_malnutrition, x = ~perc_wast, y=~region, type = "bar",
text = ~paste('Wasting, prevalence:',perc_wasting), name='Prevalence Wasting')  %>%
add_trace(x = ~perc_stunt, name = '% Stunting') %>%
layout(xaxis = list(title = '% of children'), barmode = 'group')
library(plotly)
plot_ly(perc_malnutrition, x = ~perc_wast, y=~region, type = "bar",
text = ~paste('Wasting, prevalence:',perc_wasting), name='% Wasting')  %>%
add_trace(x = ~perc_stunt, name = '% Stunting') %>%
layout(xaxis = list(title = 'Percentage of children'), barmode = 'group')
library(plotly)
plot_ly(perc_malnutrition, x = ~perc_wast, y=~region, type = "bar",
text = ~paste('Wasting %:',perc_wasting), name='% Wasting')  %>%
add_trace(x = ~perc_stunt, name = '% Stunting') %>%
layout(xaxis = list(title = 'Percentage of children'), barmode = 'group')
library(plotly)
plot_ly(perc_malnutrition, x = ~perc_wast, y=~region, type = "bar",
text = ~paste('Wasting %:',perc_wasting), name='% Wasting')  %>%
add_trace(x = ~perc_stunt, text = ~paste('Stunting %:',perc_stunt), name = '% Stunting') %>%
layout(xaxis = list(title = 'Percentage of children'), barmode = 'group')
jme2014 <- jme[which(jme$year=='2014'),]
library(plotly)
p<- plot_ly(jme2014, x = ~num_wasting, y=~region, type = "bar",
text = ~paste('Wasting, number of children:',num_wasting), name='Wasting')  %>%
add_trace(x = ~num_stunting, name = 'Stunting') %>%
layout(xaxis = list(title = 'Number of children'), barmode = 'group')
p
region <- c("CEECIS", "EAPRO", "ESARO", "LACRO", "MENA", "ROSA" , "WCARO")
perc_wast <- c(3.0,	5.5,	6.2,	1.7,	8.7,	14.2,	8.6)
perc_stunt <- c(11.9,	18.7,	35.7,	12.8,	21.3,	39.1,	33.8)
perc_malnutrition <- data.frame(region, perc_wast, perc_stunt)
names(perc_malnutrition) <- c("Region", "perc_wasting","perc_stunt")
region <- c("CEECIS", "EAPRO", "ESARO", "LACRO", "MENA", "ROSA" , "WCARO")
perc_wast <- c(3.0,	5.5,	6.2,	1.7,	8.7,	14.2,	8.6)
perc_stunt <- c(11.9,	18.7,	35.7,	12.8,	21.3,	39.1,	33.8)
perc_malnutrition <- data.frame(region, perc_wast, perc_stunt)
names(perc_malnutrition) <- c("Region", "perc_wasting","perc_stunt")
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = ~region, type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = "#55a191", type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = "#55a191", type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = "#2e94ab", type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = "blue", type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = ~"blue", type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = ~blue, type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = ~region, type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
plot_ly(iycf, x = ~Region, y=~Counselling_mothers, color = "#2e94ab", type = "bar") %>%
layout(yaxis = list(title = 'Number of mothers reached with IYCF counselling'), barmode = 'group')
library(plotly)
plot_ly(MNP, x = ~region, y=~childrenMNP, color = ~childrenMNP, type = "bar", opacity=0.8) %>%
layout(yaxis = list(title = 'Number of children given MNP'), barmode = 'group')
library(plotly)
plot_ly(SAMadm, x = ~Year, y=~admissionSAM, color = ~admissionSAM, type = "bar", opacity=0.8)
library(plotly)
plot_ly(SAMadm, x = ~Year, y=~admissionSAM, color = ~year, type = "bar", opacity=0.8)
burden <- c(10461,	203754,	2024390,	39111,	902309,	5492273,	2695617)
target <- c(800,	89129,	1034644,	24111,	391753,	439093,	2019409)
admissions <- c(122,	93934,	855880,	23505,	373590,	442076,	1744458)
region <- c("CEECIS", "EAPRO" , "ESARO" , "LACRO" , "MENA" , "ROSA" , "WCARO")
burden_p <-	c(3.83,	3.78,	32.93,	2.88,	61.79,	31.71,	34.29)
target_p <-	c(0.29,	1.65,	16.83,	1.77,	26.83,	2.53,	25.69)
admissions_p <-	c(0.045,	1.74,	13.92,	1.73,	25.58,	2.55,	22.19)
coverage <- data.frame(burden, target, admissions, region, burden_p, target_p, admissions_p)
names(coverage) <- c( "Region", "Estimated Burden","Target Area", "Admissions",
"% Estimated Burden", "% Target Area", "% Admissions")
library(plotly)
plot_ly(coverage, x = ~region, y = ~burden_p, type = 'bar', name = 'Burden (%)') %>%
add_trace(y = ~target_p, name = 'Target (%)') %>%
add_trace(y = ~admissions_p, name = 'Admissions (%)') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
library(plotly)
p <- plot_ly(coverage, x = ~region, y = ~burden, type = 'bar', name = 'Burden (#)') %>%
add_trace(y = ~target, name = 'Target (#)') %>%
add_trace(y = ~admissions, name = 'Admissions (#)') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
